import { useState, useEffect } from 'react';
import { ParsedPolicyData } from '@/utils/policyDataParser';
import { PolicyPersistenceService } from '@/services/policyPersistenceService';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

export function usePersistedPolicies() {
  const [policies, setPolicies] = useState<ParsedPolicyData[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();
  const { toast } = useToast();

  // Carregar ap√≥lices quando usu√°rio faz login
  useEffect(() => {
    console.log(`üîç usePersistedPolicies - Verificando estado do usu√°rio:`, {
      userId: user?.id,
      userExists: !!user
    });
    
    if (user?.id) {
      console.log(`üîÑ Usu√°rio logado detectado - Iniciando carregamento de ap√≥lices para: ${user.id}`);
      loadPersistedPolicies();
    } else {
      console.log(`üö™ Usu√°rio n√£o logado - Limpando dados das ap√≥lices`);
      // Limpar dados quando usu√°rio faz logout
      setPolicies([]);
    }
  }, [user?.id]);

  const loadPersistedPolicies = async () => {
    if (!user?.id) {
      console.log(`‚ö†Ô∏è loadPersistedPolicies chamado sem userId v√°lido`);
      return;
    }

    console.log(`üöÄ Iniciando loadPersistedPolicies para userId: ${user.id}`);
    setIsLoading(true);
    setError(null);

    try {
      console.log(`üîÑ Carregando ap√≥lices persistidas do usu√°rio: ${user.id}`);
      
      const loadedPolicies = await PolicyPersistenceService.loadUserPolicies(user.id);
      
      console.log(`üîç Resultado do PolicyPersistenceService.loadUserPolicies:`, {
        length: loadedPolicies.length,
        policies: loadedPolicies
      });
      
      setPolicies(loadedPolicies);
      
      if (loadedPolicies.length > 0) {
        console.log(`‚úÖ ${loadedPolicies.length} ap√≥lices carregadas com sucesso`);
        console.log(`üìö Ap√≥lices carregadas:`, loadedPolicies.map(p => ({ id: p.id, name: p.name, pdfPath: p.pdfPath })));
      } else {
        console.log('üì≠ Nenhuma ap√≥lice encontrada no hist√≥rico');
      }

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro ao carregar dados';
      setError(errorMessage);
      console.error('‚ùå Erro ao carregar ap√≥lices persistidas:', err);
      
      toast({
        title: "‚ùå Erro ao Carregar Dados",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      console.log(`üèÅ loadPersistedPolicies finalizado para userId: ${user.id}`);
    }
  };

  // Adicionar nova ap√≥lice √† lista
  const addPolicy = (policy: ParsedPolicyData) => {
    setPolicies(prev => [policy, ...prev]);
  };

  // Remover ap√≥lice da lista
  const removePolicy = (policyId: string) => {
    setPolicies(prev => prev.filter(p => p.id !== policyId));
  };

  // Deletar ap√≥lice do banco de dados
  const deletePolicy = async (policyId: string): Promise<boolean> => {
    if (!user?.id) {
      toast({
        title: "‚ùå Erro de Autentica√ß√£o",
        description: "Usu√°rio n√£o autenticado",
        variant: "destructive",
      });
      return false;
    }

    try {
      console.log(`üóëÔ∏è Deletando ap√≥lice: ${policyId}`);
      
      const { error } = await supabase
        .from('policies')
        .delete()
        .eq('id', policyId)
        .eq('user_id', user.id); // Garantir que s√≥ delete as pr√≥prias

      if (error) {
        throw error;
      }

      // Remover do estado local
      removePolicy(policyId);
      
      toast({
        title: "‚úÖ Ap√≥lice Deletada",
        description: "A ap√≥lice foi removida com sucesso",
      });
      
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao deletar ap√≥lice:', error);
      toast({
        title: "‚ùå Erro ao Deletar",
        description: "N√£o foi poss√≠vel remover a ap√≥lice",
        variant: "destructive",
      });
      return false;
    }
  };

  // Atualizar ap√≥lice no banco de dados
  const updatePolicy = async (policyId: string, updates: Partial<ParsedPolicyData>): Promise<boolean> => {
    if (!user?.id) {
      toast({
        title: "‚ùå Erro de Autentica√ß√£o",
        description: "Usu√°rio n√£o autenticado",
        variant: "destructive",
      });
      return false;
    }

    try {
      console.log(`‚úèÔ∏è Atualizando ap√≥lice: ${policyId}`);
      
      // Converter dados para formato do banco
      const dbUpdates = {
        segurado: updates.name,
        seguradora: updates.insurer,
        tipo_seguro: updates.type,
        numero_apolice: updates.policyNumber,
        valor_premio: updates.premium,
        custo_mensal: updates.monthlyAmount,
        inicio_vigencia: updates.startDate,
        fim_vigencia: updates.endDate,
        forma_pagamento: updates.paymentFrequency,
        status: updates.status,
      };

      const { error } = await supabase
        .from('policies')
        .update(dbUpdates)
        .eq('id', policyId)
        .eq('user_id', user.id); // Garantir que s√≥ edite as pr√≥prias

      if (error) {
        throw error;
      }

      // Atualizar estado local
      setPolicies(prev => 
        prev.map(p => p.id === policyId ? { ...p, ...updates } : p)
      );
      
      toast({
        title: "‚úÖ Ap√≥lice Atualizada",
        description: "As altera√ß√µes foram salvas com sucesso",
      });
      
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar ap√≥lice:', error);
      toast({
        title: "‚ùå Erro ao Atualizar",
        description: "N√£o foi poss√≠vel salvar as altera√ß√µes",
        variant: "destructive",
      });
      return false;
    }
  };

  // Obter URL de download para um PDF
  const getPDFDownloadUrl = async (policyId: string): Promise<string | null> => {
    const policy = policies.find(p => p.id === policyId);
    
    console.log(`üîç Tentativa de download - Policy ID: ${policyId}`);
    console.log(`üîç Policy encontrada:`, policy);
    console.log(`üîç PDF Path da policy: ${policy?.pdfPath}`);
    
    if (!policy?.pdfPath) {
      console.log(`‚ùå Policy sem pdfPath: ${policy?.name}`);
      toast({
        title: "‚ùå Arquivo n√£o encontrado",
        description: "PDF n√£o est√° dispon√≠vel para download",
        variant: "destructive",
      });
      return null;
    }

    try {
      console.log(`üì• Solicitando URL de download para: ${policy.pdfPath}`);
      const downloadUrl = await PolicyPersistenceService.getPDFDownloadUrl(policy.pdfPath);
      
      if (!downloadUrl) {
        console.log(`‚ùå URL de download n√£o gerada para: ${policy.pdfPath}`);
        toast({
          title: "‚ùå Erro no Download",
          description: "N√£o foi poss√≠vel gerar o link de download",
          variant: "destructive",
        });
        return null;
      }

      console.log(`‚úÖ URL de download gerada: ${downloadUrl}`);
      return downloadUrl;
    } catch (error) {
      console.error('‚ùå Erro ao obter URL de download:', error);
      toast({
        title: "‚ùå Erro no Download",
        description: "Falha ao acessar o arquivo PDF",
        variant: "destructive",
      });
      return null;
    }
  };

  // Baixar PDF de uma ap√≥lice
  const downloadPDF = async (policyId: string, policyName: string) => {
    const downloadUrl = await getPDFDownloadUrl(policyId);
    
    if (downloadUrl) {
      // Criar link tempor√°rio para download
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = `${policyName}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({
        title: "üì• Download Iniciado",
        description: `Baixando arquivo: ${policyName}.pdf`,
      });
    }
  };

  // Recarregar dados
  const refreshPolicies = () => {
    if (user?.id) {
      loadPersistedPolicies();
    }
  };

  return {
    policies,
    isLoading,
    error,
    addPolicy,
    removePolicy,
    deletePolicy,
    updatePolicy,
    downloadPDF,
    refreshPolicies,
    hasPersistedData: policies.length > 0
  };
}