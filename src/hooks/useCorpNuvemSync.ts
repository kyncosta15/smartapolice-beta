import { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { CorpNuvemSyncService } from '@/services/corpnuvemSyncService';
import { supabase } from '@/integrations/supabase/client';

/**
 * Hook para sincronizar ap√≥lices da API CorpNuvem automaticamente
 * quando o usu√°rio loga com CPF/CNPJ
 */
export function useCorpNuvemSync() {
  const [isSyncing, setIsSyncing] = useState(false);
  const [lastSyncDate, setLastSyncDate] = useState<Date | null>(null);
  const { toast } = useToast();

  const syncPolicies = async (userDocument: string) => {
    if (!userDocument || isSyncing) return;

    try {
      setIsSyncing(true);

      // Verificar se precisa sincronizar
      const needsSync = await CorpNuvemSyncService.needsSync(userDocument);
      
      if (!needsSync) {
        console.log('‚è≠Ô∏è Sincroniza√ß√£o n√£o necess√°ria (√∫ltima sync < 24h)');
        return;
      }

      console.log('üîÑ Iniciando sincroniza√ß√£o autom√°tica...');
      
      const count = await CorpNuvemSyncService.syncUserPolicies(userDocument);
      
      setLastSyncDate(new Date());

      if (count > 0) {
        toast({
          title: "Ap√≥lices Sincronizadas",
          description: `${count} ap√≥lice(s) da API foram vinculadas √† sua conta.`,
          duration: 5000,
        });
      }
    } catch (error) {
      console.error('‚ùå Erro na sincroniza√ß√£o autom√°tica:', error);
      // N√£o mostrar toast de erro para n√£o incomodar o usu√°rio
    } finally {
      setIsSyncing(false);
    }
  };

  // Sincronizar automaticamente quando o usu√°rio loga
  useEffect(() => {
    const checkAndSync = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // Buscar CPF/CNPJ do usu√°rio na tabela users
      const { data: userData } = await supabase
        .from('users')
        .select('documento')
        .eq('id', user.id)
        .single();

      if (userData?.documento) {
        console.log('üîç Documento encontrado, iniciando sincroniza√ß√£o autom√°tica...');
        await syncPolicies(userData.documento);
      } else {
        console.log('‚ö†Ô∏è Nenhum documento cadastrado para este usu√°rio');
      }
    };

    checkAndSync();
  }, []);

  return {
    isSyncing,
    lastSyncDate,
    syncPolicies,
  };
}

