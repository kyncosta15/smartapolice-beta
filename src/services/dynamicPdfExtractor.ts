export class DynamicPDFExtractor {
  private static readonly WEBHOOK_URL = 'https://rcorpsolutions.app.n8n.cloud/webhook-test/upload-arquivo';
  private static readonly TIMEOUT = 120000; // 2 minutos para m√∫ltiplos arquivos
  private static readonly MAX_FILES = 10; // Limite de arquivos por requisi√ß√£o

  static async extractFromPDF(file: File, userId?: string): Promise<any> {
    console.log(`üîÑ Enviando arquivo individual: ${file.name} (${file.size} bytes)`);
    console.log('üì° Webhook URL:', this.WEBHOOK_URL);
    console.log(`üë§ userId: ${userId}`);

    try {
      const formData = new FormData();
      formData.append('file1', file);
      formData.append('timestamp', new Date().toISOString());
      formData.append('totalFiles', '1');
      
      if (userId) {
        formData.append('userId', userId);
        console.log(`‚úÖ userId ${userId} adicionado ao FormData`);
      }

      console.log(`üì§ Enviando para: ${this.WEBHOOK_URL}`);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.log(`‚è∞ Timeout ap√≥s ${this.TIMEOUT}ms para ${file.name}`);
        controller.abort();
      }, this.TIMEOUT);

      const response = await fetch(this.WEBHOOK_URL, {
        method: 'POST',
        body: formData,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log(`üì° Resposta para ${file.name}: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro HTTP:', response.status, response.statusText, errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const contentLength = response.headers.get('content-length');
      if (contentLength === '0') {
        throw new Error('Resposta vazia do servidor');
      }

      const responseText = await response.text();
      console.log(`üìù Resposta texto (primeiros 200 chars): ${responseText.substring(0, 200)}...`);

      if (!responseText.trim()) {
        throw new Error('Resposta vazia do servidor');
      }

      let data;
      try {
        data = JSON.parse(responseText);
      } catch (parseError) {
        console.error(`‚ùå Erro ao parsear JSON:`, parseError);
        console.error(`üìù Resposta completa: ${responseText}`);
        throw new Error(`Resposta inv√°lida do servidor`);
      }

      console.log(`‚úÖ Dados extra√≠dos de ${file.name}:`, data);
      
      const isArray = Array.isArray(data);
      const resultArray = isArray ? data : [data];
      
      console.log(`üìä Tipo de resposta do N8N: ${isArray ? 'ARRAY' : 'OBJETO √öNICO'}`);
      console.log(`üìä Total de ap√≥lices retornadas pelo N8N: ${resultArray.length}`);
      
      if (resultArray.length > 1) {
        console.log(`üéâ M√öLTIPLAS AP√ìLICES DETECTADAS NO PDF "${file.name}"`);
        resultArray.forEach((policy, idx) => {
          console.log(`  ${idx + 1}. ${policy.segurado || 'Nome n√£o identificado'} - ${policy.numero_apolice || 'Sem n√∫mero'}`);
        });
      } else {
        console.log(`‚ÑπÔ∏è Apenas UMA ap√≥lice detectada no PDF "${file.name}"`);
      }
      
      if (!data || (Array.isArray(data) && data.length === 0)) {
        throw new Error(`Dados vazios retornados para ${file.name}`);
      }

      return resultArray;

    } catch (error) {
      console.error(`‚ùå Erro ao processar ${file.name}:`, error);
      throw error;
    }
  }

  static async extractFromMultiplePDFs(files: File[], userId?: string): Promise<any[]> {
    console.log('üöÄüöÄüöÄ ==========================================');
    console.log('üöÄüöÄüöÄ INICIANDO extractFromMultiplePDFs');
    console.log('üöÄüöÄüöÄ ==========================================');
    
    if (files.length > this.MAX_FILES) {
      throw new Error(`Limite de ${this.MAX_FILES} arquivos por vez. Voc√™ selecionou ${files.length}.`);
    }

    console.log(`üîÑ Enviando ${files.length} arquivos em uma √∫nica requisi√ß√£o`);
    console.log(`üë§ userId recebido:`, userId);
    console.log(`üì° Endpoint: ${this.WEBHOOK_URL}`);
    
    try {
      const formData = new FormData();
      
      console.log('üì¶ Construindo FormData...');
      
      // Adicionar cada arquivo com um nome √∫nico (file1, file2, file3, etc)
      files.forEach((file, index) => {
        const fieldName = `file${index + 1}`;
        formData.append(fieldName, file);
        console.log(`üìé Adicionado campo "${fieldName}": ${file.name} (${(file.size / 1024).toFixed(2)} KB)`);
      });
      
      // Adicionar metadados
      const timestamp = new Date().toISOString();
      formData.append('timestamp', timestamp);
      formData.append('totalFiles', files.length.toString());
      console.log(`‚è∞ Timestamp: ${timestamp}`);
      console.log(`üìä Total de arquivos: ${files.length}`);
      
      if (userId) {
        formData.append('userId', userId);
        console.log(`‚úÖ userId ${userId} adicionado ao FormData`);
      } else {
        console.warn('‚ö†Ô∏è Nenhum userId fornecido');
      }

      console.log('üì§üì§üì§ ENVIANDO REQUISI√á√ÉO PARA O N8N...');
      console.log(`üì§ URL: ${this.WEBHOOK_URL}`);
      console.log(`üì§ M√©todo: POST`);
      console.log(`üì§ Timeout: ${this.TIMEOUT / 1000} segundos`);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.error(`‚è∞‚ùå TIMEOUT! Requisi√ß√£o abortada ap√≥s ${this.TIMEOUT / 1000} segundos`);
        controller.abort();
      }, this.TIMEOUT);

      console.log('üåê Executando fetch...');
      const fetchStartTime = Date.now();
      
      const response = await fetch(this.WEBHOOK_URL, {
        method: 'POST',
        body: formData,
        signal: controller.signal,
      });

      const fetchDuration = Date.now() - fetchStartTime;
      clearTimeout(timeoutId);

      console.log('‚úÖ‚úÖ‚úÖ RESPOSTA RECEBIDA DO N8N!');
      console.log(`üì° Status: ${response.status} ${response.statusText}`);
      console.log(`‚è±Ô∏è Dura√ß√£o: ${fetchDuration}ms`);
      console.log(`üìä Headers:`, Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro HTTP:', response.status, errorText);
        throw new Error(`Erro no servidor n8n: ${response.status} - ${response.statusText}`);
      }

      const responseText = await response.text();
      console.log(`üìù Resposta bruta (primeiros 1000 chars):\n${responseText.substring(0, 1000)}`);

      if (!responseText.trim()) {
        throw new Error('Resposta vazia do servidor n8n');
      }

      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch (parseError) {
        console.error(`‚ùå Erro ao parsear JSON:`, parseError);
        console.error(`Resposta completa:\n${responseText}`);
        throw new Error('Resposta inv√°lida do servidor n8n (n√£o √© JSON v√°lido)');
      }

      console.log(`‚úÖ Resposta parseada com sucesso:`, responseData);

      // Extrair ap√≥lices da resposta
      // O n8n retorna { apolices: [...] }
      const apolices = responseData.apolices || responseData;
      
      if (!Array.isArray(apolices)) {
        console.warn('‚ö†Ô∏è Resposta n√£o √© um array, tentando converter...');
        return [apolices];
      }

      console.log(`üéâ ${apolices.length} ap√≥lice(s) extra√≠da(s) com sucesso!`);
      
      // Logar resumo de cada ap√≥lice
      apolices.forEach((apolice, idx) => {
        console.log(`  ${idx + 1}. ${apolice.segurado || 'Nome n√£o dispon√≠vel'} - ${apolice.numero_apolice || 'Sem n√∫mero'}`);
      });

      return apolices;

    } catch (error) {
      console.error(`‚ùå ERRO CR√çTICO ao processar arquivos:`, error);
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          throw new Error('Tempo esgotado! O processamento demorou mais de 2 minutos. Tente com menos arquivos.');
        }
        throw error;
      }
      
      throw new Error('Erro desconhecido ao processar os arquivos');
    }
  }

  private static createFallbackData(file: File, userId?: string): any[] {
    console.log(`üîÑ Criando dados de fallback para ${file.name}`);
    
    const premioAnual = 1200 + Math.random() * 2000;
    const premioMensal = premioAnual / 12;
    
    const mockData = {
      informacoes_gerais: {
        nome_apolice: `Ap√≥lice ${file.name.replace('.pdf', '')}`,
        tipo: "Auto",
        status: "Ativa",
        numero_apolice: `POL-${Date.now()}-${Math.floor(Math.random() * 1000)}`
      },
      seguradora: {
        empresa: "Seguradora Simulada",
        categoria: "Veicular",
        cobertura: "Cobertura B√°sica",
        entidade: "Corretora Simulada"
      },
      informacoes_financeiras: {
        premio_anual: premioAnual,
        premio_mensal: premioMensal
      },
      vigencia: {
        inicio: new Date().toISOString().split('T')[0],
        fim: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        extraido_em: new Date().toISOString().split('T')[0]
      },
      segurado: {
        nome: `Cliente ${file.name.replace('.pdf', '').substring(0, 20)}`,
        documento: `${Math.floor(10000000000 + Math.random() * 90000000000)}`,
        tipo_pessoa: 'PF'
      },
      // Campos adicionais necess√°rios para valida√ß√£o
      premio: premioAnual,
      premium: premioAnual,
      user_id: userId,
      documento: `${Math.floor(10000000000 + Math.random() * 90000000000)}`,
      documento_tipo: 'CPF'
    };

    console.log(`‚úÖ Dados simulados criados para ${file.name}`);
    return [mockData];
  }
}
