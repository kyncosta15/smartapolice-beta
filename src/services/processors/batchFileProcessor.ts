import { ParsedPolicyData } from '@/utils/policyDataParser';
import { DynamicPDFExtractor } from '../dynamicPdfExtractor';
import { N8NDataConverter } from '@/utils/parsers/n8nDataConverter';
import { StructuredDataConverter } from '@/utils/parsers/structuredDataConverter';
import { FileProcessingStatus } from '@/types/pdfUpload';
import { PolicyPersistenceService } from '../policyPersistenceService';
import { SafeDataExtractor } from '@/utils/safeDataExtractor';

export interface DuplicateInfo {
  policyNumber: string;
  policyId: string;
  policyName: string;
}

export class BatchFileProcessor {
  private updateFileStatus: (fileName: string, update: Partial<FileProcessingStatus[string]>) => void;
  private removeFileStatus: (fileName: string) => void;
  private onPolicyExtracted: (policy: ParsedPolicyData) => void;
  private onDuplicateDetected?: (info: DuplicateInfo) => void;
  private toast: any;

  constructor(
    updateFileStatus: (fileName: string, update: Partial<FileProcessingStatus[string]>) => void,
    removeFileStatus: (fileName: string) => void,
    onPolicyExtracted: (policy: ParsedPolicyData) => void,
    toast: any,
    onDuplicateDetected?: (info: DuplicateInfo) => void
  ) {
    this.updateFileStatus = updateFileStatus;
    this.removeFileStatus = removeFileStatus;
    this.onPolicyExtracted = onPolicyExtracted;
    this.toast = toast;
    this.onDuplicateDetected = onDuplicateDetected;
  }

  async processMultipleFiles(files: File[], userId: string | null, userEmail?: string | null): Promise<ParsedPolicyData[]> {
    console.log('üöÄüöÄüöÄ ============================================');
    console.log('üöÄüöÄüöÄ BATCH FILE PROCESSOR - IN√çCIO');
    console.log('üöÄüöÄüöÄ ============================================');
    console.log(`üöÄ Arquivos: ${files.length}`);
    console.log(`üë§ userId:`, userId);
    console.log(`üìß userEmail:`, userEmail);
    console.log(`üîî Callback duplicata existe?`, !!this.onDuplicateDetected);
    
    // NOTA: userId pode ser null se os dados vierem do N8N com user_id nos dados
    // Verificaremos e resolveremos o user_id durante o processamento
    
    // Inicializar status dos arquivos
    files.forEach(file => {
      this.updateFileStatus(file.name, {
        progress: 0,
        status: 'uploading',
        message: 'Iniciando processamento...'
      });
    });

    const allResults: ParsedPolicyData[] = [];

    try {
      // Atualizar status para processamento
      files.forEach(file => {
        this.updateFileStatus(file.name, {
          progress: 20,
          status: 'processing',
          message: 'Extraindo dados com IA...'
        });
      });

      console.log('üîÑ Iniciando extra√ß√£o de dados');
      const extractedDataArray = await DynamicPDFExtractor.extractFromMultiplePDFs(files, userId);
      
      console.log(`üì¶ DADOS BRUTOS EXTRA√çDOS:`, extractedDataArray);
      console.log(`üìä Tipo dos dados extra√≠dos:`, typeof extractedDataArray);
      console.log(`üìè Quantidade de dados extra√≠dos: ${extractedDataArray.length}`);

      console.log(`üì¶ Dados extra√≠dos: ${extractedDataArray.length} itens`);

      if (!extractedDataArray || extractedDataArray.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum dado extra√≠do - Array vazio ou null');
        console.warn('‚ö†Ô∏è Valor exato do array:', extractedDataArray);
        throw new Error('Nenhum dado foi extra√≠do dos arquivos');
      } 
      
      console.log('‚úÖ Dados extra√≠dos com sucesso, iniciando processamento individual');
      
      // Processar dados extra√≠dos
      for (let index = 0; index < extractedDataArray.length; index++) {
        const singleData = extractedDataArray[index];
        console.log(`üîÑ Processando item ${index + 1}/${extractedDataArray.length}`);
        console.log(`üìä DADOS DO ITEM ${index + 1}:`, JSON.stringify(singleData, null, 2));
        
        // CORRE√á√ÉO CR√çTICA: Resolver user_id usando estrat√©gias robustas
        const { UserIdResolver } = await import('@/utils/userIdResolver');
        let resolvedUserId: string;
        
        try {
          console.log(`üîç Resolvendo user_id para item ${index + 1}`);
          console.log(`üë§ userId do contexto: ${userId}`);
          console.log(`üë§ user_id nos dados: ${singleData.user_id}`);
          
          resolvedUserId = await UserIdResolver.resolveUserId(singleData, userId, userEmail);
          console.log(`‚úÖ User ID resolvido para item ${index + 1}: ${resolvedUserId}`);
        } catch (error) {
          console.error(`‚ùå Falha ao resolver user_id para item ${index + 1}:`, error);
          
          // Debug detalhado para troubleshooting
          await UserIdResolver.debugUserResolution(singleData, userId);
          
          this.updateFileStatus(files[Math.min(index, files.length - 1)]?.name || `Item ${index + 1}`, {
            progress: 100,
            status: 'failed',
            message: `‚ùå Erro: ${error instanceof Error ? error.message : 'N√£o foi poss√≠vel identificar o usu√°rio'}`
          });
          continue; // Pular este item e continuar com os pr√≥ximos
        }
        
        const dataWithUserId = {
          ...singleData,
          user_id: resolvedUserId // Garantir userId nos dados
        };
        
        const relatedFileName = this.findRelatedFileNameSafely(singleData, files) || files[Math.min(index, files.length - 1)]?.name || `Arquivo ${index + 1}`;
        
        this.updateFileStatus(relatedFileName, {
          progress: 60 + (index * 15),
          status: 'processing',
          message: 'Convertendo dados...'
        });
        
        try {
          console.log(`‚úÖ Convertendo dados para ap√≥lice com userId: ${resolvedUserId}`);
          console.log(`üìã Dados com userId adicionado:`, JSON.stringify(dataWithUserId, null, 2));
          
          const parsedPolicy = await this.convertToParsedPolicy(dataWithUserId, relatedFileName, files[Math.min(index, files.length - 1)], resolvedUserId);
          console.log(`‚úÖ Ap√≥lice convertida com sucesso:`, parsedPolicy.name);
          
          allResults.push(parsedPolicy);
          
            // Salvar no banco usando sistema robusto
            const relatedFile = files[Math.min(index, files.length - 1)];
            if (relatedFile) {
              console.log(`üíæ üíæ üíæ ============================================`);
              console.log(`üíæ üíæ üíæ SALVANDO AP√ìLICE: ${parsedPolicy.name}`);
              console.log(`üíæ üíæ üíæ N√∫mero: ${parsedPolicy.policyNumber}`);
              console.log(`üíæ üíæ üíæ ============================================`);
              
              const { RobustPolicyPersistence } = await import('@/services/robustPolicyPersistence');
              const saveResult = await RobustPolicyPersistence.savePolicyRobust(relatedFile, parsedPolicy, resolvedUserId);
              
              console.log(`üìä üìä üìä ================================================`);
              console.log(`üìä üìä üìä RESULTADO DO SAVE POLICY ROBUST:`);
              console.log(`üìä üìä üìä ================================================`);
              console.log(`üìä saveResult COMPLETO:`, JSON.stringify(saveResult, null, 2));
              console.log(`üìä saveResult.success:`, saveResult.success);
              console.log(`üìä saveResult.isUpdate:`, saveResult.isUpdate);
              console.log(`üìä saveResult.policyId:`, saveResult.policyId);
              console.log(`üìä Tipo de isUpdate:`, typeof saveResult.isUpdate);
              console.log(`üìä isUpdate √© true?`, saveResult.isUpdate === true);
              console.log(`üìä üìä üìä ================================================`);
              
              if (saveResult.success) {
                const action = saveResult.isUpdate ? 'üîÑ atualizada' : '‚úÖ criada';
                console.log(`${action} no banco: ${parsedPolicy.name}`);
                
                // SEMPRE chamar callback com informa√ß√µes da ap√≥lice salva
                console.log('üîî üîî üîî ============================================');
                console.log('üîî üîî üîî VERIFICANDO SE √â DUPLICATA...');
                console.log('üîî isUpdate:', saveResult.isUpdate);
                console.log('üîî onDuplicateDetected existe?', !!this.onDuplicateDetected);
                console.log('üîî üîî üîî ============================================');
                
                // Se for atualiza√ß√£o, notificar com informa√ß√µes da duplicata
                if (saveResult.isUpdate === true) {
                  console.log('üîîüîîüîî üîîüîîüîî üîîüîîüîî ================================================');
                  console.log('üîîüîîüîî üîîüîîüîî üîîüîîüîî DUPLICATA CONFIRMADA! CHAMANDO CALLBACK...');
                  console.log('üîîüîîüîî üîîüîîüîî üîîüîîüîî ================================================');
                  
                  const duplicateInfo = {
                    policyNumber: parsedPolicy.policyNumber,
                    policyId: saveResult.policyId || '',
                    policyName: parsedPolicy.name
                  };
                  
                  console.log('üìã Info da duplicata que ser√° enviada:', duplicateInfo);
                  
                  // Toast imediato para feedback visual
                  console.log('üçû Chamando toast...');
                  this.toast({
                    title: "üìã Ap√≥lice Duplicada Detectada",
                    description: `A ap√≥lice ${parsedPolicy.policyNumber} foi atualizada com os novos dados`,
                    duration: 5000,
                  });
                  console.log('üçû Toast chamado');
                  
                  // Chamar callback se dispon√≠vel
                  if (this.onDuplicateDetected) {
                    console.log('‚úÖ‚úÖ‚úÖ CHAMANDO onDuplicateDetected AGORA!');
                    console.log('‚úÖ‚úÖ‚úÖ Fun√ß√£o callback:', this.onDuplicateDetected);
                    
                    this.onDuplicateDetected(duplicateInfo);
                    
                    console.log('‚úÖ‚úÖ‚úÖ onDuplicateDetected CHAMADO COM SUCESSO!');
                  } else {
                    console.error('‚ùå‚ùå‚ùå Callback onDuplicateDetected N√ÉO EXISTE!');
                    console.error('‚ùå‚ùå‚ùå this.onDuplicateDetected:', this.onDuplicateDetected);
                  }
                } else {
                  console.log('‚ÑπÔ∏è Nova ap√≥lice criada (n√£o √© duplicata)');
                  console.log('‚ÑπÔ∏è isUpdate era:', saveResult.isUpdate);
                }
              } else {
                console.warn(`‚ö†Ô∏è Falha ao salvar ap√≥lice no banco: ${parsedPolicy.name}`, saveResult.errors);
              }
            }
          
          // Notificar componente pai
          console.log(`üì¢ Notificando componente pai sobre nova ap√≥lice: ${parsedPolicy.name}`);
          this.onPolicyExtracted(parsedPolicy);
          
          this.updateFileStatus(relatedFileName, {
            progress: 90 + (index * 2),
            status: 'processing',
            message: `‚úÖ Processado: ${parsedPolicy.insurer}`
          });
          
        } catch (conversionError) {
          console.error(`‚ùå Erro na convers√£o do item ${index + 1}:`, conversionError);
          console.error(`‚ùå Stack trace:`, conversionError instanceof Error ? conversionError.stack : 'N/A');
          // Marcar como erro mas continuar processamento
          this.updateFileStatus(relatedFileName, {
            progress: 100,
            status: 'failed',
            message: `‚ùå Erro na convers√£o: ${conversionError instanceof Error ? conversionError.message : 'Erro desconhecido'}`
          });
        }
      }

      // Marcar todos como conclu√≠dos
      files.forEach((file, index) => {
        const processedCount = allResults.length;
        this.updateFileStatus(file.name, {
          progress: 100,
          status: processedCount > 0 ? 'completed' : 'failed',
          message: processedCount > 0 ? `‚úÖ Conclu√≠do (${processedCount} ap√≥lices)` : '‚ùå Nenhuma ap√≥lice processada'
        });
      });

      console.log(`üéâ Processamento finalizado! ${allResults.length} ap√≥lices processadas`);
      
      if (allResults.length > 0) {
        this.toast({
          title: `üéâ Processamento Conclu√≠do`,
          description: `${allResults.length} ap√≥lices foram processadas e salvas com sucesso`,
        });
      } else {
        this.toast({
          title: "‚ö†Ô∏è Nenhuma Ap√≥lice Processada",
          description: "N√£o foi poss√≠vel extrair dados dos arquivos enviados",
          variant: "destructive",
        });
      }

      // Limpar status ap√≥s 3 segundos
      setTimeout(() => {
        files.forEach(file => {
          this.removeFileStatus(file.name);
        });
      }, 3000);

      return allResults;

    } catch (error) {
      console.error('‚ùå Erro geral no processamento:', error);
      
      // Atualizar status com erro
      files.forEach(file => {
        this.updateFileStatus(file.name, {
          progress: 100,
          status: 'failed',
          message: `‚ùå Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
        });
      });

      this.toast({
        title: "‚ùå Erro no Processamento",
        description: error instanceof Error ? error.message : 'Erro desconhecido no processamento',
        variant: "destructive",
      });

      // Limpar status ap√≥s 5 segundos
      setTimeout(() => {
        files.forEach(file => {
          this.removeFileStatus(file.name);
        });
      }, 5000);

      throw error;
    }
  }

  private async convertToParsedPolicy(data: any, fileName: string, file: File, userId: string): Promise<ParsedPolicyData> {
    console.log('üîÑ Convertendo dados para ParsedPolicy com valida√ß√£o robusta:', data);
    console.log('üë§ userId para convers√£o:', userId);
    
    // CORRE√á√ÉO CR√çTICA: Garantir que userId esteja sempre presente
    if (!userId) {
      console.error('‚ùå userId n√£o fornecido para convers√£o');
      throw new Error('user_id √© obrigat√≥rio para converter dados de ap√≥lice');
    }
    
    // Usar validador robusto sem alucina√ß√£o
    const { RobustDataValidator } = await import('@/utils/robustDataValidator');
    const validationResult = RobustDataValidator.validateWithoutHallucination(data);
    
    if (!validationResult.isValid) {
      console.error('‚ùå Dados inv√°lidos:', validationResult.errors);
      throw new Error(`Dados inv√°lidos: ${validationResult.errors.join(', ')}`);
    }
    
    if (validationResult.warnings.length > 0) {
      console.warn('‚ö†Ô∏è Avisos na valida√ß√£o:', validationResult.warnings);
    }
    
    // Verificar formato dos dados e converter adequadamente
    if (data.numero_apolice && data.segurado && data.seguradora) {
      console.log('üìã Convertendo dados diretos do N8N com valida√ß√£o');
      return N8NDataConverter.convertN8NDirectData(data, fileName, file, userId);
    } else if (data.informacoes_gerais && data.seguradora && data.vigencia) {
      console.log('üìã Convertendo dados estruturados com valida√ß√£o');
      return StructuredDataConverter.convertStructuredData(data, fileName, file);
    } else {
      console.warn('üìã Dados em formato n√£o reconhecido, criando fallback validado');
      return this.createFallbackPolicy(file, userId, validationResult.normalizedData);
    }
  }

  private createFallbackPolicy(file: File, userId: string, originalData?: any): ParsedPolicyData {
    // Usar SafeDataExtractor para extrair dados de forma segura
    const seguradoName = SafeDataExtractor.extractInsuredName(originalData?.segurado) || `Cliente ${file.name.replace('.pdf', '')}`;
    const seguradoraName = SafeDataExtractor.extractInsurerName(originalData?.seguradora) || 'Seguradora N√£o Identificada';
    const premio = SafeDataExtractor.extractFinancialValue(originalData?.premio) || (1200 + Math.random() * 1800);
    
    const mockPolicyData: ParsedPolicyData = {
      id: window.crypto.randomUUID(),
      name: seguradoName,
      type: 'auto',
      insurer: seguradoraName,
      premium: premio,
      monthlyAmount: premio / 12,
      startDate: originalData?.inicio || new Date().toISOString().split('T')[0],
      endDate: originalData?.fim || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      policyNumber: SafeDataExtractor.extractPolicyNumber(originalData) || `FB-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
      paymentFrequency: 'monthly',
      status: 'vigente',
      file,
      extractedAt: new Date().toISOString(),
      installments: [],
      
      // Campos obrigat√≥rios
      expirationDate: originalData?.fim || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      policyStatus: 'vigente',
      
      // Campos espec√≠ficos se dispon√≠veis
      insuredName: seguradoName,
      documento: originalData?.documento,
      documento_tipo: originalData?.documento_tipo as 'CPF' | 'CNPJ' || 'CPF',
      vehicleModel: originalData?.modelo_veiculo,
      uf: originalData?.uf,
      deductible: SafeDataExtractor.extractFinancialValue(originalData?.franquia) || undefined,
      
      // Campos opcionais
      coberturas: originalData?.coberturas || [{ descricao: 'Cobertura B√°sica' }],
      entity: originalData?.corretora || 'Corretora N√£o Identificada',
      category: 'Veicular',
      coverage: ['Cobertura B√°sica'],
      totalCoverage: premio
    };

    console.log(`‚úÖ Pol√≠tica fallback criada: ${mockPolicyData.name}`);
    return mockPolicyData;
  }

  /**
   * Fun√ß√£o segura para encontrar arquivo relacionado
   * Usa SafeDataExtractor para extrair nome do segurado de forma segura
   */
  private findRelatedFileNameSafely(data: any, files: File[]): string | null {
    try {
      // Usar SafeDataExtractor para extrair nome do segurado de forma segura
      const seguradoName = SafeDataExtractor.extractInsuredName(data.segurado);
      
      if (seguradoName) {
        const seguradoLower = seguradoName.toLowerCase();
        const matchingFile = files.find(file => {
          const fileName = file.name.toLowerCase();
          const firstNames = seguradoLower.split(' ').slice(0, 2);
          return firstNames.some(name => fileName.includes(name));
        });
        return matchingFile?.name || null;
      }
      
      return null;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao encontrar arquivo relacionado:', error);
      return null;
    }
  }
}